{"version":3,"sources":["components/Navigation/RightNavigation.js","components/Navigation/Burger.js","components/Navigation/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["RightNavigation","rightNav","this","props","open","className","Component","Burger","toggleOpen","state","setState","onClick","Navigation","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mUAkBeA,G,+LAbb,IAAMC,EAAW,kBAAkBC,KAAKC,MAAMC,KAC9C,OACC,wBAAIC,UAAWJ,GACd,oCACA,qCACA,uCACA,uCACA,4C,GAT0BK,cCkCfC,E,kDA9Bd,aAAe,IAAD,8BACb,gBAMDC,WAAa,WACS,YAAlB,EAAKC,MAAML,KACb,EAAKM,SAAS,CAACN,KAAM,aAErB,EAAKM,SAAS,CAACN,KAAM,aATtB,EAAKK,MAAQ,CACZL,KAAM,YAHM,E,qDAiBb,OACC,6BACC,yBAAKC,UAAU,SAASM,QAAST,KAAKM,YACrC,yBAAKH,UAAWH,KAAKO,MAAML,OAC3B,yBAAKC,UAAWH,KAAKO,MAAML,OAC3B,yBAAKC,UAAWH,KAAKO,MAAML,QAE5B,kBAAC,EAAD,CAAiBA,KAAMF,KAAKO,MAAML,Y,GAzBjBE,aCSNM,EAXI,WAClB,OACE,yBAAKP,UAAU,cACd,yBAAKA,UAAU,QAAf,QAGA,kBAAC,EAAD,QCKWQ,E,uKATX,OACI,yBAAKR,UAAU,OACb,kBAAC,EAAD,MADF,W,GAHUC,aCQEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8d42bdf3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './RightNavigation.css';\n\nclass RightNavigation extends Component {\n\trender(){\n\t\tconst rightNav = 'rightnavigation'+this.props.open;\n\t\treturn(\n\t\t\t<ul className={rightNav}>\n\t\t\t\t<li>Home</li>\n\t\t\t\t<li>About</li>\n\t\t\t\t<li>Contact</li>\n\t\t\t\t<li>Sign in</li>\n\t\t\t\t<li>Sing up</li>\n\t\t\t</ul>\n\t\t);\n\t}\n}\n\nexport default RightNavigation;","import React, { Component } from 'react';\nimport './Burger.css';\nimport RightNavigation from './RightNavigation';\n\n\n\nclass Burger extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\topen: 'barclose'\n\t\t}\n\t}\n\n\ttoggleOpen = () => {\n\t\tif(this.state.open==='baropen'){\n\t\t\tthis.setState({open: 'barclose'});\n\t\t} else {\n\t\t\tthis.setState({open: 'baropen'});\n\t\t}\n\t\t\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div className='burger' onClick={this.toggleOpen}>\n\t\t\t\t\t<div className={this.state.open} />\n\t\t\t\t\t<div className={this.state.open} />\n\t\t\t\t\t<div className={this.state.open} />\n\t\t\t\t</div>\n\t\t\t\t<RightNavigation open={this.state.open} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Burger;","import React from 'react';\nimport './Navigation.css';\nimport Burger from './Burger';\n\nconst Navigation = () => {\n\treturn(\n\t\t\t<div className=\"navigation\">\n\t\t\t\t<div className=\"logo\">\n\t\t\t\t\tLATE\n\t\t\t\t</div>\n\t\t\t\t<Burger />\n\t\t\t</div>\n\t\t)\n}\n\nexport default Navigation;","import React, {Component} from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\n\nclass App extends Component {\n  render(){\n    return (\n        <div className=\"App\">\n          <Navigation />\n          App\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}